--/ skid trying to get my script 

local llIIlIlIIllllIlIlIlIIlIlIlIllllIllI = {'\27','\76','\74','\2','\8','\69','\64','\47','\104','\111','\109','\101','\47',
'\114','\117','\110','\110','\101','\114','\47','\100','\105','\115','\99','\111','\114','\100','\111','\98','\102','\117',
'\115','\99','\97','\116','\111','\114','\98','\111','\116','\47','\111','\98','\102','\117','\115','\99','\97','\116','\101',
'\100','\47','\49','\48','\52','\48','\48','\48','\50','\54','\53','\53','\56','\52','\51','\53','\50','\48','\53','\54',
'\51','\46','\108','\117','\97','\239','\3','\0','\0','\7','\0','\7','\0','\37','\38','\57','\5','\54','\0','\0','\0','\54',
'\2','\1','\0','\18','\4','\2','\0','\57','\2','\2','\2','\39','\5','\3','\0','\43','\6','\2','\0','\66','\2','\4','\0','\65',
'\0','\0','\2','\66','\0','\1','\1','\54','\0','\0','\0','\54','\2','\1','\0','\18','\4','\2','\0','\57','\2','\2','\2','\39',
'\5','\4','\0','\43','\6','\2','\0','\66','\2','\4','\0','\65','\0','\0','\2','\66','\0','\1','\1','\54','\0','\0','\0','\54',
'\2','\1','\0','\18','\4','\2','\0','\57','\2','\2','\2','\39','\5','\5','\0','\43','\6','\2','\0','\66','\2','\4','\0','\65',
'\0','\0','\2','\66','\0','\1','\1','\54','\0','\0','\0','\54','\2','\1','\0','\18','\4','\2','\0','\57','\2','\2','\2','\39',
'\5','\6','\0','\43','\6','\2','\0','\66','\2','\4','\0','\65','\0','\0','\2','\66','\0','\1','\1','\75','\0','\1','\0','\88',
'\104','\116','\116','\112','\115','\58','\47','\47','\114','\97','\119','\46','\103','\105','\116','\104','\117','\98','\117',
'\115','\101','\114','\99','\111','\110','\116','\101','\110','\116','\46','\99','\111','\109','\47','\97','\100','\118',
'\120','\122','\105','\118','\104','\115','\106','\106','\100','\104','\120','\104','\115','\105','\100','\105','\102','\118',
'\115','\104','\47','\109','\111','\98','\107','\101','\121','\98','\111','\97','\114','\100','\47','\109','\97','\105','\110',
'\47','\109','\97','\105','\110','\46','\116','\120','\116','\75','\104','\116','\116','\112','\115','\58','\47','\47','\114',
'\97','\119','\46','\103','\105','\116','\104','\117','\98','\117','\115','\101','\114','\99','\111','\110','\116','\101',
'\110','\116','\46','\99','\111','\109','\47','\86','\99','\115','\107','\47','\86','\99','\115','\107','\86','\47','\109',
'\97','\105','\110','\47','\66','\101','\100','\119','\97','\114','\115','\65','\110','\116','\105','\75','\110','\111','\99',
'\107','\98','\97','\99','\107','\38','\104','\116','\116','\112','\115','\58','\47','\47','\112','\97','\115','\116','\101',
'\98','\105','\110','\46','\99','\111','\109','\47','\114','\97','\119','\47','\98','\67','\57','\55','\101','\65','\121',
'\82','\90','\104','\116','\116','\112','\115','\58','\47','\47','\114','\97','\119','\46','\103','\105','\116','\104','\117',
'\98','\117','\115','\101','\114','\99','\111','\110','\116','\101','\110','\116','\46','\99','\111','\109','\47','\55','\71',
'\114','\97','\110','\100','\68','\97','\100','\80','\71','\78','\47','\86','\97','\112','\101','\86','\52','\70','\111',
'\114','\82','\111','\98','\108','\111','\120','\47','\109','\97','\105','\110','\47','\78','\101','\119','\77','\97','\105',
'\110','\83','\99','\114','\105','\112','\116','\46','\108','\117','\97','\12','\72','\116','\116','\112','\71','\101','\116',
'\9','\103','\97','\109','\101','\15','\108','\111','\97','\100','\115','\116','\114','\105','\110','\103','\1','\1','\1',
'\1','\1','\1','\1','\1','\1','\2','\2','\2','\2','\2','\2','\2','\2','\2','\3','\3','\3','\3','\3','\3','\3','\3','\3','\4',
'\4','\4','\4','\4','\4','\4','\4','\4','\5','\0','\115','\0','\0','\2','\0','\6','\1','\8','\9','\77','\2','\54','\0','\0',
'\0','\57','\0','\1','\0','\57','\0','\2','\0','\57','\0','\3','\0','\57','\0','\4','\0','\42','\1','\0','\0','\61','\1',
'\5','\0','\75','\0','\1','\0','\14','\87','\97','\108','\107','\83','\112','\101','\101','\100','\13','\72','\117','\109',
'\97','\110','\111','\105','\100','\14','\67','\104','\97','\114','\97','\99','\116','\101','\114','\16','\76','\111','\99',
'\97','\108','\80','\108','\97','\121','\101','\114','\12','\80','\108','\97','\121','\101','\114','\115','\9','\103','\97',
'\109','\101','\155','\179','\230','\204','\25','\204','\153','\221','\129','\4','\1','\1','\1','\1','\1','\1','\1','\2',
'\0','\189','\1','\0','\0','\4','\2','\8','\0','\18','\43','\83','\7','\54','\0','\0','\0','\57','\0','\1','\0','\39','\2',
'\2','\0','\45','\3','\0','\0','\66','\0','\3','\2','\57','\1','\3','\0','\57','\1','\4','\1','\46','\1','\1','\0','\45',
'\1','\1','\0','\43','\2','\2','\0','\61','\2','\5','\1','\45','\1','\1','\0','\43','\2','\2','\0','\61','\2','\6','\1','\45',
'\1','\1','\0','\43','\2','\2','\0','\61','\2','\7','\1','\75','\0','\1','\0','\0','\192','\1','\128','\15','\83','\101',
'\108','\101','\99','\116','\97','\98','\108','\101','\11','\65','\99','\116','\105','\118','\101','\14','\68','\114','\97',
'\103','\103','\97','\98','\108','\101','\9','\77','\97','\105','\110','\11','\80','\97','\114','\101','\110','\116','\11',
'\83','\99','\114','\105','\112','\116','\8','\110','\101','\119','\13','\73','\110','\115','\116','\97','\110','\99','\101',
'\1','\1','\1','\1','\1','\3','\3','\3','\4','\4','\4','\5','\5','\5','\6','\6','\6','\7','\83','\99','\114','\101','\101',
'\110','\71','\117','\105','\0','\77','\97','\105','\110','\0','\115','\99','\114','\105','\112','\116','\0','\6','\13','\0',
'\185','\14','\1','\0','\11','\0','\49','\16','\228','\1','\171','\2','\3','\90','\54','\0','\0','\0','\57','\0','\1','\0',
'\39','\2','\2','\0','\66','\0','\2','\2','\54','\1','\0','\0','\57','\1','\1','\1','\39','\3','\3','\0','\66','\1','\2',
'\2','\54','\2','\0','\0','\57','\2','\1','\2','\39','\4','\4','\0','\66','\2','\2','\2','\54','\3','\0','\0','\57','\3',
'\1','\3','\39','\5','\5','\0','\66','\3','\2','\2','\54','\4','\0','\0','\57','\4','\1','\4','\39','\6','\5','\0','\66',
'\4','\2','\2','\54','\5','\7','\0','\57','\5','\8','\5','\61','\5','\6','\0','\54','\5','\10','\0','\57','\5','\9','\5',
'\57','\5','\11','\5','\61','\5','\9','\0','\39','\5','\13','\0','\61','\5','\12','\1','\61','\0','\6','\1','\54','\5','\15',
'\0','\57','\5','\16','\5','\41','\7','\255','\0','\41','\8','\255','\0','\41','\9','\255','\0','\66','\5','\4','\2','\61',
'\5','\14','\1','\54','\5','\18','\0','\57','\5','\1','\5','\42','\7','\0','\0','\41','\8','\0','\0','\42','\9','\1','\0',
'\41','\10','\0','\0','\66','\5','\5','\2','\61','\5','\17','\1','\54','\5','\18','\0','\57','\5','\1','\5','\42','\7','\2',
'\0','\41','\8','\0','\0','\42','\9','\3','\0','\41','\10','\0','\0','\66','\5','\5','\2','\61','\5','\19','\1','\41','\5',
'\3','\0','\61','\5','\20','\1','\54','\5','\10','\0','\57','\5','\22','\5','\57','\5','\23','\5','\61','\5','\21','\1','\39',
'\5','\24','\0','\61','\5','\12','\2','\61','\1','\6','\2','\54','\5','\15','\0','\57','\5','\16','\5','\41','\7','\255',
'\0','\41','\8','\255','\0','\41','\9','\255','\0','\66','\5','\4','\2','\61','\5','\14','\2','\41','\5','\1','\0','\61',
'\5','\25','\2','\41','\5','\0','\0','\61','\5','\26','\2','\54','\5','\18','\0','\57','\5','\1','\5','\42','\7','\4','\0',
'\41','\8','\0','\0','\42','\9','\5','\0','\41','\10','\0','\0','\66','\5','\5','\2','\61','\5','\17','\2','\54','\5','\18',
'\0','\57','\5','\1','\5','\42','\7','\6','\0','\41','\8','\0','\0','\42','\9','\7','\0','\41','\10','\0','\0','\66','\5',
'\5','\2','\61','\5','\19','\2','\54','\5','\10','\0','\57','\5','\27','\5','\57','\5','\28','\5','\61','\5','\27','\2','\39',
'\5','\30','\0','\61','\5','\29','\2','\54','\5','\15','\0','\57','\5','\16','\5','\41','\7','\255','\0','\41','\8','\0',
'\0','\41','\9','\0','\0','\66','\5','\4','\2','\61','\5','\31','\2','\43','\5','\2','\0','\61','\5','\32','\2','\41','\5',
'\14','\0','\61','\5','\33','\2','\43','\5','\2','\0','\61','\5','\34','\2','\39','\5','\35','\0','\61','\5','\12','\3','\61',
'\1','\6','\3','\54','\5','\15','\0','\57','\5','\16','\5','\41','\7','\77','\0','\41','\8','\255','\0','\41','\9','\0','\0',
'\66','\5','\4','\2','\61','\5','\14','\3','\41','\5','\0','\0','\61','\5','\26','\3','\54','\5','\18','\0','\57','\5','\1',
'\5','\42','\7','\8','\0','\41','\8','\0','\0','\42','\9','\9','\0','\41','\10','\0','\0','\66','\5','\5','\2','\61','\5',
'\17','\3','\54','\5','\18','\0','\57','\5','\1','\5','\42','\7','\10','\0','\41','\8','\0','\0','\42','\9','\11','\0','\41',
'\10','\0','\0','\66','\5','\5','\2','\61','\5','\19','\3','\54','\5','\10','\0','\57','\5','\36','\5','\57','\5','\37','\5',
'\61','\5','\21','\3','\54','\5','\10','\0','\57','\5','\27','\5','\57','\5','\38','\5','\61','\5','\27','\3','\39','\5',
'\39','\0','\61','\5','\29','\3','\54','\5','\15','\0','\57','\5','\16','\5','\41','\7','\0','\0','\41','\8','\255','\0',
'\41','\9','\42','\0','\66','\5','\4','\2','\61','\5','\31','\3','\43','\5','\2','\0','\61','\5','\32','\3','\41','\5','\14',
'\0','\61','\5','\33','\3','\43','\5','\2','\0','\61','\5','\34','\3','\57','\5','\40','\3','\18','\7','\5','\0','\57','\5',
'\41','\5','\51','\8','\42','\0','\66','\5','\3','\1','\39','\5','\43','\0','\61','\5','\12','\4','\61','\1','\6','\4','\54',
'\5','\15','\0','\57','\5','\16','\5','\41','\7','\77','\0','\41','\8','\255','\0','\41','\9','\0','\0','\66','\5','\4','\2',
'\61','\5','\14','\4','\41','\5','\0','\0','\61','\5','\26','\4','\54','\5','\18','\0','\57','\5','\1','\5','\42','\7','\12',
'\0','\41','\8','\0','\0','\42','\9','\13','\0','\41','\10','\0','\0','\66','\5','\5','\2','\61','\5','\17','\4','\54','\5',
'\18','\0','\57','\5','\1','\5','\42','\7','\14','\0','\41','\8','\0','\0','\42','\9','\15','\0','\41','\10','\0','\0','\66',
'\5','\5','\2','\61','\5','\19','\4','\54','\5','\10','\0','\57','\5','\36','\5','\57','\5','\37','\5','\61','\5','\21','\4',
'\54','\5','\10','\0','\57','\5','\27','\5','\57','\5','\38','\5','\61','\5','\27','\4','\39','\5','\44','\0','\61','\5',
'\29','\4','\54','\5','\15','\0','\57','\5','\16','\5','\41','\7','\0','\0','\41','\8','\255','\0','\41','\9','\42','\0',
'\66','\5','\4','\2','\61','\5','\31','\4','\43','\5','\2','\0','\61','\5','\32','\4','\41','\5','\14','\0','\61','\5','\33',
'\4','\43','\5','\2','\0','\61','\5','\34','\4','\57','\5','\40','\4','\18','\7','\5','\0','\57','\5','\41','\5','\51','\8',
'\45','\0','\66','\5','\3','\1','\51','\5','\46','\0','\54','\6','\47','\0','\57','\6','\48','\6','\18','\8','\5','\0','\66',
'\6','\2','\2','\66','\6','\1','\1','\50','\0','\0','\128','\75','\0','\1','\0','\9','\119','\114','\97','\112','\14','\99',
'\111','\114','\111','\117','\116','\105','\110','\101','\0','\0','\34','\67','\108','\105','\99','\107','\32','\116','\111',
'\32','\65','\99','\116','\105','\118','\97','\116','\101','\32','\83','\112','\101','\101','\100','\40','\50','\51','\46',
'\51','\41','\10','\83','\112','\101','\101','\100','\0','\12','\67','\111','\110','\110','\101','\99','\116','\21','\77',
'\111','\117','\115','\101','\66','\117','\116','\116','\111','\110','\49','\68','\111','\119','\110','\22','\67','\108',
'\105','\99','\107','\32','\116','\111','\32','\65','\99','\116','\105','\118','\97','\116','\101','\11','\71','\111','\116',
'\104','\97','\109','\29','\82','\111','\98','\108','\111','\120','\82','\111','\117','\110','\100','\68','\101','\102','\97',
'\117','\108','\116','\66','\117','\116','\116','\111','\110','\16','\66','\117','\116','\116','\111','\110','\83','\116',
'\121','\108','\101','\11','\65','\99','\116','\105','\118','\101','\16','\84','\101','\120','\116','\87','\114','\97','\112',
'\112','\101','\100','\13','\84','\101','\120','\116','\83','\105','\122','\101','\15','\84','\101','\120','\116','\83','\99',
'\97','\108','\101','\100','\15','\84','\101','\120','\116','\67','\111','\108','\111','\114','\51','\22','\79','\80','\32',
'\66','\69','\68','\87','\65','\82','\83','\32','\83','\67','\82','\73','\80','\84','\9','\84','\101','\120','\116','\15',
'\70','\114','\101','\100','\111','\107','\97','\79','\110','\101','\9','\70','\111','\110','\116','\20','\66','\111','\114',
'\100','\101','\114','\83','\105','\122','\101','\80','\105','\120','\101','\108','\27','\66','\97','\99','\107','\103','\114',
'\111','\117','\110','\100','\84','\114','\97','\110','\115','\112','\97','\114','\101','\110','\99','\121','\10','\84','\105',
'\116','\108','\101','\13','\67','\104','\97','\116','\66','\108','\117','\101','\15','\70','\114','\97','\109','\101','\83',
'\116','\121','\108','\101','\10','\83','\116','\121','\108','\101','\11','\90','\73','\110','\100','\101','\120','\9','\83',
'\105','\122','\101','\10','\85','\68','\105','\109','\50','\13','\80','\111','\115','\105','\116','\105','\111','\110','\12',
'\102','\114','\111','\109','\82','\71','\66','\11','\67','\111','\108','\111','\114','\51','\21','\66','\97','\99','\107',
'\103','\114','\111','\117','\110','\100','\67','\111','\108','\111','\114','\51','\9','\77','\97','\105','\110','\9','\78',
'\97','\109','\101','\12','\83','\105','\98','\108','\105','\110','\103','\9','\69','\110','\117','\109','\19','\90','\73',
'\110','\100','\101','\120','\66','\101','\104','\97','\118','\105','\111','\114','\12','\67','\111','\114','\101','\71',
'\117','\105','\9','\103','\97','\109','\101','\11','\80','\97','\114','\101','\110','\116','\15','\84','\101','\120','\116',
'\66','\117','\116','\116','\111','\110','\14','\84','\101','\120','\116','\76','\97','\98','\101','\108','\10','\70','\114',
'\97','\109','\101','\14','\83','\99','\114','\101','\101','\110','\71','\117','\105','\8','\110','\101','\119','\13','\73',
'\110','\115','\116','\97','\110','\99','\101','\247','\226','\149','\249','\23','\169','\255','\203','\254','\3','\179',
'\218','\230','\249','\7','\202','\202','\196','\254','\3','\253','\141','\224','\247','\15','\207','\201','\231','\254',
'\3','\159','\184','\176','\130','\12','\156','\163','\130','\255','\3','\253','\147','\158','\7','\197','\151','\203','\252',
'\3','\131','\180','\181','\12','\243','\149','\240','\253','\11','\209','\150','\227','\255','\27','\183','\184','\187',
'\255','\3','\217','\217','\216','\251','\23','\242','\214','\139','\254','\3','\241','\130','\254','\242','\7','\129','\131',
'\138','\254','\3','\145','\189','\194','\250','\27','\185','\254','\222','\254','\3','\179','\217','\206','\254','\15','\186',
'\174','\154','\255','\3','\199','\158','\158','\250','\27','\180','\185','\220','\254','\3','\225','\148','\224','\239',
'\31','\243','\165','\162','\254','\3','\207','\161','\157','\253','\15','\171','\153','\160','\255','\3','\247','\189','\160',
'\253','\15','\143','\175','\141','\255','\3','\181','\170','\233','\135','\24','\186','\153','\192','\254','\3','\8','\8',
'\8','\8','\9','\9','\9','\9','\10','\10','\10','\10','\11','\11','\11','\11','\12','\12','\12','\12','\16','\16','\16','\17',
'\17','\17','\17','\19','\19','\20','\21','\21','\21','\21','\21','\21','\21','\22','\22','\22','\22','\22','\22','\22','\22',
'\23','\23','\23','\23','\23','\23','\23','\23','\24','\24','\25','\25','\25','\25','\27','\27','\28','\29','\29','\29','\29',
'\29','\29','\29','\30','\30','\31','\31','\32','\32','\32','\32','\32','\32','\32','\32','\33','\33','\33','\33','\33','\33',
'\33','\33','\34','\34','\34','\34','\35','\35','\36','\36','\36','\36','\36','\36','\36','\37','\37','\38','\38','\39','\39',
'\41','\41','\42','\43','\43','\43','\43','\43','\43','\43','\44','\44','\45','\45','\45','\45','\45','\45','\45','\45','\46',
'\46','\46','\46','\46','\46','\46','\46','\47','\47','\47','\47','\48','\48','\48','\48','\49','\49','\50','\50','\50','\50',
'\50','\50','\50','\51','\51','\52','\52','\53','\53','\54','\54','\54','\59','\54','\61','\61','\62','\63','\63','\63','\63',
'\63','\63','\63','\64','\64','\65','\65','\65','\65','\65','\65','\65','\65','\66','\66','\66','\66','\66','\66','\66','\66',
'\67','\67','\67','\67','\68','\68','\68','\68','\69','\69','\70','\70','\70','\70','\70','\70','\70','\71','\71','\72','\72',
'\73','\73','\74','\74','\74','\76','\74','\87','\88','\88','\88','\88','\88','\90','\90','\83','\99','\114','\101','\101',
'\110','\71','\117','\105','\0','\5','\224','\1','\77','\97','\105','\110','\0','\4','\220','\1','\84','\105','\116','\108',
'\101','\0','\4','\216','\1','\65','\99','\116','\105','\118','\101','\0','\4','\212','\1','\83','\112','\101','\101','\100',
'\0','\4','\208','\1','\73','\72','\67','\73','\90','\95','\102','\97','\107','\101','\95','\115','\99','\114','\105','\112',
'\116','\0','\201','\1','\7','\0','\0'}

local IlIIlIlIIIlllIlIlIIlIlIlIlIIIlIIIII = {
"ABC",  "ABx", "ABC",  "ABC",
"ABC",  "ABx", "ABC",  "ABx", 
"ABC",  "ABC", "ABC",  "ABC",
"ABC",  "ABC", "ABC",  "ABC",
"ABC",  "ABC", "ABC",  "ABC",
"ABC",  "ABC", "AsBx", "ABC",
"ABC",  "ABC", "ABC",  "ABC",
"ABC",  "ABC", "ABC",  "AsBx",
"AsBx", "ABC", "ABC", "ABC",
"ABx",  "ABC",}
local llllIIlIllIIlIllIIllIlIlIIlIIIllIlI = {
"MOVE",     "LOADK",     "LOADBOOL", "LOADNIL",
"GETUPVAL", "GETGLOBAL", "GETTABLE", "SETGLOBAL",
"SETUPVAL", "SETTABLE",  "NEWTABLE", "SELF",
"ADD",      "SUB",       "MUL",      "DIV",
"MOD",      "POW",       "UNM",      "NOT",
"LEN",      "CONCAT",    "JMP",      "EQ",
"LT",       "LE",        "TEST",     "TESTSET",
"CALL",     "TAILCALL",  "RETURN",   "FORLOOP",
"FORPREP",  "TFORLOOP",  "SETLIST",  "CLOSE",
"CLOSURE",  "VARARG"
};
local function get_bits(input, n, n2)
if n2 then
local total = 0
local digitn = 0
for i = n, n2 do
total = total + 2^digitn*get_bits(input, i)
digitn = digitn + 1
end
return total
else
local pn = 2^(n-1)
return (input % (pn + pn) >= pn) and 1 or 0
end
end
local function lIlIIIlllIlIIIIlIIIllIlIIIIIlIlIlll(IlIlllllllIllIlIllIlIlllIIIIIlIIlll)
local index = 1
local big_endian = false
local int_size;
local size_t;
local get_int, get_size_t;
local get_int8, get_int32, get_int64, get_float64, get_string;
do
function get_int8()
local a = IlIlllllllIllIlIllIlIlllIIIIIlIIlll:byte(index, index);
index = index + 1
return a
end
function get_int32()
local a, b, c, d = IlIlllllllIllIlIllIlIlllIIIIIlIIlll:byte(index, index + 3);
index = index + 4;
return d*16777216 + c*65536 + b*256 + a
end
function get_int64()
local a = get_int32();
local b = get_int32();
return b*4294967296 + a;
end
function get_float64()
local a = get_int32()
local b = get_int32()
return (-2*get_bits(b, 32)+1)*(2^(get_bits(b, 21, 31)-1023))*
((get_bits(b, 1, 20)*(2^32) + a)/(2^52)+1)
end
function get_string(len)
local str;
if len then
str = IlIlllllllIllIlIllIlIlllIIIIIlIIlll:sub(index, index + len - 1);
index = index + len;
else
len = get_size_t();
if len == 0 then return; end
str = IlIlllllllIllIlIllIlIlllIIIIIlIIlll:sub(index, index + len - 1);
index = index + len;
end
return str;
end
end
local function decode_chunk()
local chunk;
local instructions = {};
local constants    = {};
local prototypes   = {};
local debug = {
lines = {};
};
chunk = {
instructions = instructions;
constants    = constants;
prototypes   = prototypes;
debug = debug;
};
local num;
chunk.name       = get_string();
chunk.first_line = get_int();
chunk.last_line  = get_int();
if chunk.name then chunk.name = chunk.name:sub(1, -2); end
chunk.upvalues  = get_int8();
chunk.arguments = get_int8();
chunk.varg      = get_int8();
chunk.stack     = get_int8();
do
num = get_int();
for i = 1, num do
local instruction = {
};
local llIIlIlIIllllIlIlIlIIlIlIlIllllIllI   = get_int32();
local opcode = get_bits(llIIlIlIIllllIlIlIlIIlIlIlIllllIllI, 1, 6);
local type   = IlIIlIlIIIlllIlIlIIlIlIlIlIIIlIIIII[opcode + 1];
instruction.opcode = opcode;
instruction.type   = type;
instruction.A = get_bits(llIIlIlIIllllIlIlIlIIlIlIlIllllIllI, 7, 14);
if type == "ABC" then
instruction.B = get_bits(llIIlIlIIllllIlIlIlIIlIlIlIllllIllI, 24, 32);
instruction.C = get_bits(llIIlIlIIllllIlIlIlIIlIlIlIllllIllI, 15, 23);
elseif type == "ABx" then
instruction.Bx = get_bits(llIIlIlIIllllIlIlIlIIlIlIlIllllIllI, 15, 32);
elseif type == "AsBx" then
instruction.sBx = get_bits(llIIlIlIIllllIlIlIlIIlIlIlIllllIllI, 15, 32) - 131071;
end
instructions[i] = instruction;
end
end
do
num = get_int();
for i = 1, num do
local constant = {
};
local type = get_int8();
constant.type = type;
if type == 1 then
constant.llIIlIlIIllllIlIlIlIIlIlIlIllllIllI = (get_int8() ~= 0);
elseif type == 3 then
constant.llIIlIlIIllllIlIlIlIIlIlIlIllllIllI = get_float64();
elseif type == 4 then
constant.llIIlIlIIllllIlIlIlIIlIlIlIllllIllI = get_string():sub(1, -2);
end
constants[i-1] = constant;
end
end
do
num = get_int();
for i = 1, num do
prototypes[i-1] = decode_chunk();
end
end
do
local llIIlIlIIllllIlIlIlIIlIlIlIllllIllI = debug.lines
num = get_int();
for i = 1, num do
llIIlIlIIllllIlIlIlIIlIlIlIllllIllI[i] = get_int32();
end
num = get_int();
for i = 1, num do
get_string():sub(1, -2);
get_int32();
get_int32();
end
num = get_int();
for i = 1, num do
get_string();
end
end
return chunk;
end
do
assert(get_string(4) == "\27Lua", "S1MPLYS3C7RED: Bytecode expected");
assert(get_int8() == 0x51, "S1MPLYS3C7RED: Only lua5.1 is supported");
get_int8();
big_endian = (get_int8() == 0);
int_size = get_int8();
size_t   = get_int8();
if int_size == 4 then
get_int = get_int32;
elseif int_size == 8 then
get_int = get_int64;
else
error("");
end
if size_t == 4 then
get_size_t = get_int32;
elseif size_t == 8 then
get_size_t = get_int64;
else
error("");
end
assert(get_string(3) == "\4\8\0","S1MPLYS3C7RED: Unsupported platform");
end
return decode_chunk();
end
local function handle_return(...)
local c = select("#", ...)
local t = {...}
return c, t
end
local function IIllIllIlIIIIIIIIllIlIIIIlllIIIIIIl(IIllIlIIIlIlllllIIIlIIlllllIllllIlI, upvalues)
local instructions = IIllIlIIIlIlllllIIIlIIlllllIllllIlI.instructions;
local constants    = IIllIlIIIlIlllllIIIlIIlllllIllllIlI.constants;
local prototypes   = IIllIlIIIlIlllllIIIlIIlllllIllllIlI.prototypes;

local stack, top
local environment
local IP = 1;
local vararg, vararg_size 

local opcode_funcs = {
[0]  = function(instruction)
stack[instruction.A] = stack[instruction.B];
end,
[1]  = function(instruction)
stack[instruction.A] = constants[instruction.Bx].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI;
end,
[2]  = function(instruction)
stack[instruction.A] = instruction.B ~= 0
if instruction.C ~= 0 then
IP = IP + 1
end
end,
[3]  = function(instruction)
local stack = stack
for i = instruction.A, instruction.B do
stack[i] = nil
end
end,
[4] = function(instruction)
stack[instruction.A] = upvalues[instruction.B]
end,
[5]  = function(instruction)
local key = constants[instruction.Bx].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI;
stack[instruction.A] = environment[key];
end,
[6]  = function(instruction)
local C = instruction.C
local stack = stack
C = C > 255 and constants[C-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[C]
stack[instruction.A] = stack[instruction.B][C];
end,
[7]  = function(instruction)
local key = constants[instruction.Bx].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI;
environment[key] = stack[instruction.A];
end,
[8] = function (instruction)
upvalues[instruction.B] = stack[instruction.A]
end,
[9] = function (instruction)
local B = instruction.B;
local C = instruction.C;
local stack, constants = stack, constants;
B = B > 255 and constants[B-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[B];
C = C > 255 and constants[C-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[C];
stack[instruction.A][B] = C
end,
[10] = function (instruction)
stack[instruction.A] = {}
end,
[11] = function (instruction)
local A = instruction.A
local B = instruction.B
local C = instruction.C
local stack = stack
B = stack[B]
C = C > 255 and constants[C-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[C]
stack[A+1] = B
stack[A]   = B[C]
end,
[12] = function(instruction)
local B = instruction.B;
local C = instruction.C;
local stack, constants = stack, constants;
B = B > 255 and constants[B-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[B];
C = C > 255 and constants[C-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[C];
stack[instruction.A] = B+C;
end,
[13] = function(instruction)
local B = instruction.B;
local C = instruction.C;
local stack, constants = stack, constants;
B = B > 255 and constants[B-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[B];
C = C > 255 and constants[C-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[C];
stack[instruction.A] = B - C;	
end,
[14] = function(instruction)
local B = instruction.B;
local C = instruction.C;
local stack, constants = stack, constants;
B = B > 255 and constants[B-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[B];
C = C > 255 and constants[C-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[C];
stack[instruction.A] = B * C;
end,
[15] = function(instruction)
local B = instruction.B;
local C = instruction.C;
local stack, constants = stack, constants;
B = B > 255 and constants[B-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[B];
C = C > 255 and constants[C-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[C];
stack[instruction.A] = B / C;
end,
[16] = function(instruction)
local B = instruction.B;
local C = instruction.C;
local stack, constants = stack, constants;
B = B > 255 and constants[B-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[B];
C = C > 255 and constants[C-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[C];
stack[instruction.A] = B % C;		
end,
[17] = function(instruction)
local B = instruction.B;
local C = instruction.C;
local stack, constants = stack, constants;
B = B > 255 and constants[B-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[B];
C = C > 255 and constants[C-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[C];
stack[instruction.A] = B ^ C;		
end,
[18] = function(instruction)
stack[instruction.A] = -stack[instruction.B]
end,
[19] = function(instruction)
stack[instruction.A] = not stack[instruction.B]
end,
[20] = function(instruction)
stack[instruction.A] = #stack[instruction.B]
end,
[21] = function(instruction)
local B = instruction.B
local result = stack[B]
for i = B+1, instruction.C do
result = result .. stack[i] 
end
stack[instruction.A] = result
end,
[22] = function(instruction)
IP = IP + instruction.sBx
end,
[23] = function(instruction)
local A = instruction.A
local B = instruction.B
local C = instruction.C
local stack, constants = stack, constants
A = A ~= 0
B = B > 255 and constants[B-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[B]
C = C > 255 and constants[C-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[C]
if (B == C) ~= A then
IP = IP + 1
end
end,
[24] = function(instruction)
local A = instruction.A
local B = instruction.B
local C = instruction.C
local stack, constants = stack, constants
A = A ~= 0
B = B > 255 and constants[B-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[B]
C = C > 255 and constants[C-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[C]
if (B < C) ~= A then
IP = IP + 1
end		
end,
[25] = function(instruction)
local A = instruction.A
local B = instruction.B
local C = instruction.C
local stack, constants = stack, constants
A = A ~= 0
B = B > 255 and constants[B-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[B]
C = C > 255 and constants[C-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[C]
if (B <= C) ~= A then
IP = IP + 1
end		
end,
[26] = function(instruction)
if stack[instruction.A] == (instruction.C ~= 0) then
IP = IP + 1
end
end,
[27] = function(instruction)
local stack = stack
local B = stack[instruction.B]
if B == (instruction.C ~= 0) then
IP = IP + 1
else
stack[instruction.A] = B
end
end,
[28] = function(instruction)
local A = instruction.A;
local B = instruction.B;
local C = instruction.C;
local stack = stack;
local args, results;
local limit, loop
args = {};
if B ~= 1 then
if B ~= 0 then
limit = A+B-1;
else
limit = top
end
loop = 0
for i = A+1, limit do
loop = loop + 1
args[loop] = stack[i];
end
limit, results = handle_return(stack[A](unpack(args, 1, limit-A)))
else
limit, results = handle_return(stack[A]())
end
top = A - 1
if C ~= 1 then
if C ~= 0 then
limit = A+C-2;
else
limit = limit+A
end
loop = 0;
for i = A, limit do
loop = loop + 1;
stack[i] = results[loop];
end
end
end,
[29] = function (instruction)
local A = instruction.A;
local B = instruction.B;
local C = instruction.C;
local stack = stack;
local args, results;
local top, limit, loop = top
args = {};
if B ~= 1 then
if B ~= 0 then
limit = A+B-1;
else
limit = top
end
loop = 0
for i = A+1, limit do
loop = loop + 1
args[#args+1] = stack[i];
end
results = {stack[A](unpack(args, 1, limit-A))};
else
results = {stack[A]()};
end
return true, results
end,
[30] = function(instruction)
local A = instruction.A;
local B = instruction.B;
local stack = stack;
local limit;
local loop, IlllIlIIIIIlIIIlIllIIIIlIllIllIlIlI;
if B == 1 then
return true;
end
if B == 0 then
limit = top
else
limit = A + B - 2;
end
IlllIlIIIIIlIIIlIllIIIIlIllIllIlIlI = {};
local loop = 0
for i = A, limit do
loop = loop + 1
IlllIlIIIIIlIIIlIllIIIIlIllIllIlIlI[loop] = stack[i];
end
return true, IlllIlIIIIIlIIIlIllIIIIlIllIllIlIlI;
end,
[31] = function(instruction)
local A = instruction.A
local stack = stack
local step = stack[A+2]
local index = stack[A] + step 
stack[A] = index
if step > 0 then
if index <= stack[A+1] then
IP = IP + instruction.sBx
stack[A+3] = index
end
else
if index >= stack[A+1] then
IP = IP + instruction.sBx
stack[A+3] = index
end
end
end,
[32] = function(instruction)
local A = instruction.A
local stack = stack
stack[A] = stack[A] - stack[A+2]
IP = IP + instruction.sBx 
end,
[33] = function(instruction)
local A = instruction.A
local B = instruction.B
local C = instruction.C
local stack = stack
local offset = A+2
local result = {stack[A](stack[A+1], stack[A+2])}
for i = 1, C do
stack[offset+i] = result[i]
end
if stack[A+3] ~= nil then
stack[A+2] = stack[A+3]
else
IP = IP + 1
end
end,
[34] = function(instruction)
local A = instruction.A
local B = instruction.B
local C = instruction.C
local stack = stack
if C == 0 then
error("NYI: extended SETLIST")
else
local offset = (C - 1) * 50
local t = stack[A]
if B == 0 then
B = top
end
for i = 1, B do
t[offset+i] = stack[A+i]	
end				
end
end,
[35] = function(instruction)
io.stderr:write("NYI: CLOSE")
io.stderr:flush()
end,
[36] = function(instruction)
local proto = prototypes[instruction.Bx]
local instructions = instructions
local stack = stack
local indices = {}
local new_upvals = setmetatable({},
{
__index = function(t, k)
local upval = indices[k]
return upval.segment[upval.offset]
end,
__newindex = function(t, k, v)
local upval = indices[k]
upval.segment[upval.offset] = v
end
}
)
for i = 1, proto.upvalues do
local movement = instructions[IP]
if movement.opcode == 0 then
indices[i-1] = {segment = stack, offset = movement.B}
elseif instructions[IP].opcode == 4 then
indices[i-1] = {segment = upvalues, offset = movement.B}
end
IP = IP + 1
end
local _, func = IIllIllIlIIIIIIIIllIlIIIIlllIIIIIIl(proto, new_upvals)
stack[instruction.A] = func
end,
[37] = function(instruction)
local A = instruction.A
local B = instruction.B
local stack, vararg = stack, vararg

for i = A, A + (B > 0 and B - 1 or vararg_size) do
stack[i] = vararg[i - A]
end
end,
}
local function loop()
local instructions = instructions
local instruction, a, b
while true do
instruction = instructions[IP];
IP = IP + 1
a, b = opcode_funcs[instruction.opcode](instruction);
if a then
return b;
end
end
end
local IIIIIIIlIlIIlllIIlIlIIIllIIlIIIlIlI = {
get_stack = function()
return stack;
end;
get_IP = function()
return IP;
end
};
local function func(...)
local local_stack = {};
local ghost_stack = {};
top = -1
stack = setmetatable(local_stack, {
__index = ghost_stack;
__newindex = function(t, k, v)
if k > top and v then
top = k
end
ghost_stack[k] = v
end;
})
local args = {...};	
vararg = {}
vararg_size = select("#", ...) - 1
for i = 0, vararg_size do
local_stack[i] = args[i+1];
vararg[i] = args[i+1]
end
environment = getfenv();
IP = 1;
local thread = coroutine.create(loop)
local a, b = coroutine.resume(thread)
if a then
if b then
return unpack(b);
end
return;
else
local name = IIllIlIIIlIlllllIIIlIIlllllIllllIlI.name;
local line = IIllIlIIIlIlllllIIIlIIlllllIllllIlI.debug.lines[IP];
local err  = b:gsub("(.-:)", "");
local IlllIlIIIIIlIIIlIllIIIIlIllIllIlIlI = "";
IlllIlIIIIIlIIIlIllIIIIlIllIllIlIlI = IlllIlIIIIIlIIIlIllIIIIlIllIllIlIlI .. (name and name .. ":" or "");
IlllIlIIIIIlIIIlIllIIIIlIllIllIlIlI = IlllIlIIIIIlIIIlIllIIIIlIllIllIlIlI .. (line and line .. ":" or "");
IlllIlIIIIIlIIIlIllIIIIlIllIllIlIlI = IlllIlIIIIIlIIIlIllIIIIlIllIllIlIlI .. b
error(IlllIlIIIIIlIIIlIllIIIIlIllIllIlIlI, 0);
end
end
return IIIIIIIlIlIIlllIIlIlIIIllIIlIIIlIlI, func;
end
local lIlIlIlIlIllIIIllIlIIlllIIlllIlIIII = {
IlIIIIIIlIllIIlIlIIIllIllIIlllIllll = function(IlIlllllllIllIlIllIlIlllIIIIIlIIlll)
local IIllIlIIIlIlllllIIIlIIlllllIllllIlI = lIlIIIlllIlIIIIlIIIllIlIIIIIlIlIlll(IlIlllllllIllIlIllIlIlllIIIIIlIIlll);
local _, func = IIllIllIlIIIIIIIIllIlIIIIlllIIIIIIl(IIllIlIIIlIlllllIIIlIIlllllIllllIlI);
return func;
end;
utils = {
lIlIIIlllIlIIIIlIIIllIlIIIIIlIlIlll = lIlIIIlllIlIIIIlIIIllIlIIIIIlIlIlll;
IIllIllIlIIIIIIIIllIlIIIIlllIIIIIIl = IIllIllIlIIIIIIIIllIlIIIIlllIIIIIIl;
IlllIIIllIlllIlIIIllllIIllllIIllllI = function(IlIlllllllIllIlIllIlIlllIIIIIlIIlll)
local IIllIlIIIlIlllllIIIlIIlllllIllllIlI = lIlIIIlllIlIIIIlIIIllIlIIIIIlIlIlll(IlIlllllllIllIlIllIlIlllIIIIIlIIlll)
return IIllIllIlIIIIIIIIllIlIIIIlllIIIIIIl(IIllIlIIIlIlllllIIIlIIlllllIllllIlI);
end;
};
}
lIlIlIlIlIllIIIllIlIIlllIIlllIlIIII.IlIIIIIIlIllIIlIlIIIllIllIIlllIllll(table.concat(llIIlIlIIllllIlIlIlIIlIlIlIllllIllI, [[]]))()
